# -*- coding : utf-8 -*-
# @Time: 2022/7/18 22:51
# @Author: yefei.wang
# @File: 924_min_malware_spread.py
from typing import List
from collections import Counter


class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:

        n = len(graph)
        colors = {}
        c = 0

        def dfs(node, color):
            colors[node] = color
            for nei, adj in enumerate(graph[node]):
                if adj and nei not in colors:
                    dfs(nei, color)

        for node in range(n):
            if node not in colors:
                dfs(node, c)
                c += 1

        size = Counter(colors.values())

        color_count = Counter()
        for node in initial:
            color_count[colors[node]] += 1

        ans = float('inf')

        for x in initial:
            c = colors[x]
            if color_count[c] == 1:
                if ans == float('inf'):
                    ans = x
                elif size[c] > size[colors[ans]]:
                    ans = x
                elif size[c] == size[colors[ans]] and x < ans:
                    ans = x

        return ans if ans < float('inf') else min(initial)
